name: check, build and test SuperCollider
on: [push]
jobs:
  lint:
    # TODO: add lintspaces step here as well
    runs-on: ubuntu-18.04
    steps:
      - uses: actions/checkout@v2
        with:
          submodules: recursive
      - name: cache downloads
        uses: actions/cache@v2
        with:
          path: ../downloads
          key: ${{ runner.os }}-${{ job.name }}
      - name: lint
        run: |
          pushd . >/dev/null
          cd ..
          if ! [[ -d "downloads" ]]
          then
             mkdir downloads
          fi
          cd downloads
          export RELEASE_NAME=clang+llvm-8.0.0-x86_64-linux-gnu-ubuntu-14.04
          if ! [[ -d "$RELEASE_NAME" ]]
          then
             echo "Downloading and extracting Clang 8.0.0"
             curl -o clang.tar.xz https://releases.llvm.org/8.0.0/$RELEASE_NAME.tar.xz
             tar xf clang.tar.xz
          else
             echo "Using Clang 8.0.0 from cache"
          fi
          cd $RELEASE_NAME/bin
          export PATH=$(pwd):$PATH
          echo "Added clang-format in $(pwd) to PATH"
          popd >/dev/null

          echo "Running tools/clang-format.py lintall"
          tools/clang-format.py lintall || exit 1
          echo "Lint successful"

  build-linux:
    needs: lint
    runs-on: ubuntu-${{ matrix.os-version }}
    strategy:
      matrix:
        include:
          - job-name: 'bionic gcc10'
            os-version: '18.04'
            matrix-eval: 'CC=gcc-10 && CXX=g++-10'
            compiler-packages: 'g++-10'
            use-syslibs: false
            shared-libscsynth: false
            artifact-suffix: 'linux-bionic-gcc10' # set if needed - will trigger artifact upload
            # no-ableton-link: true # set if needed
    env: 
      BUILD_PATH: ${{ github.workspace }}/build
      INSTALL_PATH: ${{ github.workspace }}/build/Install
      # ARTIFACT_SUFFIX: ${{ matrix.artifact-suffix }} # setting this  enables artifact creation/upload
      ARTIFACT_FILE: "SuperCollider-${{ github.sha }}-${{ matrix.artifact-suffix }}.zip"
      MATRIX_EVAL: ${{ matrix.matrix-eval }}
      COMPILER_PACKAGES: ${{ matrix.compiler-packages }}
      USE_SYSLIBS: ${{ matrix.use-syslibs }}
      SHARED_LIBSCSYNTH: ${{ matrix.shared-libscsynth }}
    steps:
      - uses: actions/checkout@v2
        with:
          submodules: recursive
      - name: install dependencies
        run: |
          if [[ -n "$COMPILER_PACKAGES" ]]; then sudo add-apt-repository ppa:ubuntu-toolchain-r/test; fi # get toolchains ppa
          sudo apt-get update
          sudo apt-get install --yes build-essential cmake pkg-config libjack-jackd2-dev libsndfile1-dev libasound2-dev libavahi-client-dev libreadline6-dev libfftw3-dev libicu-dev libxt-dev libudev-dev $COMPILER_PACKAGES
      - name: install qt
        run: sudo apt-get install qt5-default qt5-qmake qttools5-dev qttools5-dev-tools qtdeclarative5-dev qtwebengine5-dev libqt5svg5-dev libqt5websockets5-dev
      - name: configure
        run: |
          mkdir $BUILD_PATH && cd $BUILD_PATH
          echo "matrix eval:" "$MATRIX_EVAL"
          eval "$MATRIX_EVAL"
          echo "CC:" "$CC"
          cmake -DSC_EL=OFF -DSC_VIM=OFF -DSC_ED=OFF -DSC_QT=ON -DSC_IDE=ON  -DCMAKE_INSTALL_PREFIX:PATH=$INSTALL_PATH -DCMAKE_BUILD_TYPE=Release .. # --debug-output
      - name: build
        run: |
          cd $BUILD_PATH
          make install -j2
      - name: create archive
        if: matrix.artifact-suffix
        run: cd $INSTALL_PATH && zip --symlinks -r $ARTIFACT_FILE .
      - name: upload artifacts
        uses: actions/upload-artifact@v2
        if: matrix.artifact-suffix
        with:
          name: ${{ env.ARTIFACT_FILE }}
          path: ${{ env.INSTALL_PATH }}/${{ env.ARTIFACT_FILE }}
          retention-days: 7 # quickly remove test artifacts

  test-build-macos:
    needs: lint
    runs-on: macos-10.15
    env: 
      BUILD_PATH: ${{ github.workspace }}/build
      INSTALL_PATH: ${{ github.workspace }}/build/Install
      HOMEBREW_NO_ANALYTICS: 1
      HOMEBREW_NO_AUTO_UPDATE: 1
      HOMEBREW_NO_INSTALL_CLEANUP: 1
      XCODE_VERSION: '11.7' # set XCode version
      ARTIFACT_SUFFIX: macOS # setting this enables artifact creation/upload
    steps:
      - uses: actions/checkout@v2
        with:
          submodules: recursive
      - name: install dependencies
        run: brew install libsndfile portaudio ccache qt fftw ninja # ninja added temporarily
      - name: configure
        run: |
          mkdir $BUILD_PATH && cd $BUILD_PATH
          # cmake -G"Xcode" -DCMAKE_PREFIX_PATH=`brew --prefix qt` -DCMAKE_OSX_DEPLOYMENT_TARGET=10.10 -DSUPERNOVA=ON .. --debug-output
          cmake -G"Ninja" -DCMAKE_PREFIX_PATH=`brew --prefix qt` -DCMAKE_OSX_DEPLOYMENT_TARGET=10.10 -DSUPERNOVA=ON -DCMAKE_BUILD_TYPE=Release .. --debug-output
        env:
          DEVELOPER_DIR: "/Applications/Xcode_${{ env.XCODE_VERSION }}.app/Contents/Developer"
      - name: build
        run: cmake --build $BUILD_PATH --config Release --target install
      - name: create archive
        if: env.ARTIFACT_SUFFIX
        run: cd $INSTALL_PATH && zip --symlinks -r $ARTIFACT_FILE SuperCollider # this assumes that we end up with the build in the folder SuperCollider
        env: 
          ARTIFACT_FILE: "SuperCollider-${{ github.sha }}-${{ env.ARTIFACT_SUFFIX }}.zip"
      - name: upload artifacts
        uses: actions/upload-artifact@v2
        if: env.ARTIFACT_SUFFIX
        env: 
          ARTIFACT_FILE: "SuperCollider-${{ github.sha }}-${{ env.ARTIFACT_SUFFIX }}.zip"
        with:
          name: ${{ env.ARTIFACT_FILE }}
          path: ${{ env.INSTALL_PATH }}/${{ env.ARTIFACT_FILE }}
          retention-days: 7 # quickly remove test artifacts


# notes:

# main TODO:
# - linting
# - ccache
# - xcpretty
# - matrix config
# - library config
# - test suite
# - deployment

# echo $GITHUB_WORKSPACE # /home/runner/work/supercollider/supercollider

# when do we set version?
# export VERSION_TO_BUILD=${TRAVIS_TAG##Version-}

# split macos package installs?

# additional for cmake (macOS):
# -DRULE_LAUNCH_COMPILE=ccache \
# $EXTRA_CMAKE_FLAGS \
