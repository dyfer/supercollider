name: check, build, test
on: [push]
jobs:
  linter:
    # TODO: add lintspaces step here as well
    runs-on: ubuntu-18.04
    steps:
      - uses: actions/checkout@v2
        with:
          submodules: recursive
      # - name: cache
      #   uses: actions/cache@v1
      #   with:
      #     # path: '${{ github.workspace }}/../downloads'
      #     path: '../downloads'
      #     key: ${{ runner.os }}-${{ github.job }}-v1-${{ hashFiles('README.md') }}

      # - name: debug with tmate # live debugging
      #   uses: mxschmitt/action-tmate@v3.1
      - name: lint class library
        run: |
          sudo npm install -g lintspaces-cli
          lintspaces -e .editorconfig SCClassLibrary/**/*.sc || true # ignore failure

      - name: lint cpp files
        run: |
          # switch cmake versions
          echo "Running tools/clang-format.py lintall"
          tools/clang-format.py -c clang-format-8 -d clang-format-diff-8 lintall || exit 1
          echo "Lint successful"

  Linux:
    needs: linter
    runs-on: ubuntu-${{ matrix.os-version }} 
    # on 18.04
    # available clang: 
    # clang    clang++-6.0  clang++-9       clang-6.0  clang-9        clang-cpp-8  clang-format      clang-format-8  clang-format-diff-6.0  clang-format-diff-9     clang++  clang++-8    clang++-libc++  clang-8    clang-cpp-6.0  clang-cpp-9  clang-format-6.0  clang-format-9  clang-format-diff-8
    # available gcc:
    # gcc  gcc-10  gcc-7  gcc-8  gcc-9  gcc-ar  gcc-ar-10  gcc-ar-7  gcc-ar-8  gcc-ar-9  gcc-nm  gcc-nm-10  gcc-nm-7  gcc-nm-8  gcc-nm-9  gcc-ranlib  gcc-ranlib-10  gcc-ranlib-7  gcc-ranlib-8  gcc-ranlib-9
    strategy:
      fail-fast: false
      matrix:
        include:
          # - job-name: 'xenial gcc5' # disabled because of  https://github.com/jurplel/install-qt-action/issues/65
          #   os-version: '16.04'
          #   c-compiler: 'gcc-5'
          #   cxx-compiler: 'g++-5'
          #   use-syslibs: false
          #   shared-libscsynth: false
          #   qt-version: '5.9.3' # manually install requested version of qt
          #   # artifact-suffix: 'linux-bionic-gcc9' # set if needed - will trigger artifact upload

          - job-name: 'bionic gcc7'
            os-version: '18.04'
            c-compiler: 'gcc-7'
            cxx-compiler: 'g++-7'
            use-syslibs: false
            shared-libscsynth: false
            # artifact-suffix: 'linux-bionic-gcc9' # set if needed - will trigger artifact upload

          - job-name: 'bionic gcc8'
            os-version: '18.04'
            c-compiler: 'gcc-8'
            cxx-compiler: 'g++-8'
            use-syslibs: false
            shared-libscsynth: false
            # artifact-suffix: 'linux-bionic-gcc9' # set if needed - will trigger artifact upload

          - job-name: 'bionic gcc9'
            os-version: '18.04'
            c-compiler: 'gcc-9'
            cxx-compiler: 'g++-9'
            use-syslibs: false
            shared-libscsynth: false
            artifact-suffix: 'linux-bionic-gcc9' # set if needed - will trigger artifact upload

          - job-name: 'bionic gcc9 shared libscsynth'
            os-version: '18.04'
            c-compiler: 'gcc-9'
            cxx-compiler: 'g++-9'
            use-syslibs: false
            shared-libscsynth: true
            # artifact-suffix: 'linux-bionic-gcc9' # set if needed - will trigger artifact upload

          - job-name: 'bionic gcc10'
            os-version: '18.04'
            c-compiler: 'gcc-10'
            cxx-compiler: 'g++-10'
            use-syslibs: false
            shared-libscsynth: false
            artifact-suffix: 'linux-bionic-gcc10' # set if needed - will trigger artifact upload

          # - job-name: 'focal gcc10 use syslibs' # disabled - boost version incompatible
          #   os-version: '20.04'
          #   c-compiler: 'gcc-10'
          #   cxx-compiler: 'g++-10'
          #   use-syslibs: true
          #   shared-libscsynth: false
            # artifact-suffix: 'linux-bionic-gcc10' # set if needed - will trigger artifact upload

          - job-name: 'bionic clang6.0'
            os-version: '18.04'
            c-compiler: 'clang-6.0'
            cxx-compiler: 'clang++-6.0'
            use-syslibs: false
            shared-libscsynth: false
            # artifact-suffix: 'linux-bionic-gcc10' # set if needed - will trigger artifact upload

          - job-name: 'bionic clang8'
            os-version: '18.04'
            c-compiler: 'clang-8'
            cxx-compiler: 'clang++-8'
            use-syslibs: false
            shared-libscsynth: false
            # artifact-suffix: 'linux-bionic-gcc10' # set if needed - will trigger artifact upload

          - job-name: 'bionic clang9'
            os-version: '18.04'
            c-compiler: 'clang-9'
            cxx-compiler: 'clang++-9'
            use-syslibs: false
            shared-libscsynth: false
            # artifact-suffix: 'linux-bionic-gcc10' # set if needed - will trigger artifact upload

          - job-name: 'focal clang10'
            os-version: '20.04'
            c-compiler: 'clang-10'
            cxx-compiler: 'clang++-10'
            use-syslibs: false
            shared-libscsynth: false
            # artifact-suffix: 'linux-bionic-gcc10' # set if needed - will trigger artifact upload


    env: 
      BUILD_PATH: ${{ github.workspace }}/build
      INSTALL_PATH: ${{ github.workspace }}/build/Install
      ARTIFACT_FILE: "SuperCollider-${{ github.sha }}-${{ matrix.artifact-suffix }}.zip"
      USE_SYSLIBS: ${{ matrix.use-syslibs }}
      SHARED_LIBSCSYNTH: ${{ matrix.shared-libscsynth }}
      CC: ${{ matrix.c-compiler }}
      CXX: ${{ matrix.cxx-compiler }}
    steps:
      - uses: actions/checkout@v2
        with:
          submodules: recursive
      - name: cache
        uses: actions/cache@v1
        with:
          path: |
            # '../downloads'
            .ccache
          key: ${{ runner.os }}-v1-${{ matrix.os-version }}-${{ matrix.c-compiler }}-${{ matrix.use-syslibs }}-${{ matrix.shared-libscsynth }} # -${{ hashFiles('README.md') }}
      - name: install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install --yes build-essential cmake pkg-config libjack-jackd2-dev libsndfile1-dev libasound2-dev libavahi-client-dev libreadline6-dev libfftw3-dev libicu-dev libxt-dev libudev-dev emacs ccache
      - name: install system libraries
        if: env.USE_SYSLIBS == 'true'
        run: sudo apt-get install --yes libboost-thread-dev libboost-system-dev libboost-filesystem-dev libboost-regex-dev libboost-test-dev libboost-program-options-dev libyaml-cpp-dev
      - name: install qt from apt
        if: '!matrix.qt-version'
        run: sudo apt-get install qt5-default qt5-qmake qttools5-dev qttools5-dev-tools qtdeclarative5-dev libqt5svg5-dev libqt5websockets5-dev qtwebengine5-dev
      # custon Qt version doesn't work in ubuntu 16.04 - see https://github.com/jurplel/install-qt-action/issues/65
      - name: install qt - specific version
        uses: jurplel/install-qt-action@v2
        if: matrix.qt-version
        with:
          modules: qtwebengine
          version: ${{ matrix.qt-version }}
      # - name: debug with tmate # live debugging
      #   uses: mxschmitt/action-tmate@v3.1
      - name: configure
        run: |
          mkdir $BUILD_PATH && cd $BUILD_PATH
          
          EXTRA_CMAKE_FLAGS=

          if $USE_SYSLIBS; then EXTRA_CMAKE_FLAGS="-DSYSTEM_BOOST=ON -DSYSTEM_YAMLCPP=ON"; fi

          if $SHARED_LIBSCSYNTH; then EXTRA_CMAKE_FLAGS="-DLIBSCSYNTH=ON $EXTRA_CMAKE_FLAGS"; fi

          cmake $EXTRA_CMAKE_FLAGS -DSC_EL=ON -DSC_VIM=ON -DSC_ED=ON -DSC_QT=ON -DSC_IDE=ON  -DCMAKE_INSTALL_PREFIX:PATH=$INSTALL_PATH -DCMAKE_BUILD_TYPE=Release .. # --debug-output
      - name: build
        run: |
          cd $BUILD_PATH
          make install -j2
      - name: create archive
        if: matrix.artifact-suffix
        run: cd $INSTALL_PATH && zip --symlinks -r $ARTIFACT_FILE .
      - name: upload artifacts
        uses: actions/upload-artifact@v2
        if: matrix.artifact-suffix
        with:
          name: ${{ env.ARTIFACT_FILE }}
          path: ${{ env.INSTALL_PATH }}/${{ env.ARTIFACT_FILE }}
          retention-days: 7 # quickly remove test artifacts

  macOS:
    needs: linter
    runs-on: macos-${{ matrix.os-version }} 
    strategy:
      fail-fast: false
      matrix:
        include:

          - job-name: 'macOS'
            os-version: '10.15'
            xcode-version: '11.7'
            use-syslibs: false
            shared-libscsynth: false
            artifact-suffix: 'macOS' # set if needed - will trigger artifact upload
    env: 
      BUILD_PATH: ${{ github.workspace }}/build
      INSTALL_PATH: ${{ github.workspace }}/build/Install
      HOMEBREW_NO_ANALYTICS: 1
      HOMEBREW_NO_AUTO_UPDATE: 1
      HOMEBREW_NO_INSTALL_CLEANUP: 1
      USE_SYSLIBS: ${{ matrix.use-syslibs }}
      SHARED_LIBSCSYNTH: ${{ matrix.shared-libscsynth }}
      DEVELOPER_DIR: '/Applications/Xcode_${{ matrix.xcode-version }}.app/Contents/Developer'
      ARTIFACT_FILE: 'SuperCollider-${{ github.sha }}-${{ matrix.artifact-suffix }}.zip'
    steps:
      - uses: actions/checkout@v2
        with:
          submodules: recursive
      - name: install dependencies
        run: brew install libsndfile portaudio ccache fftw ninja # ninja added temporarily
      - name: install qt from homebrew
        if: '!matrix.qt-version'
        run: brew install qt
      - name: install qt - specific version
        uses: jurplel/install-qt-action@v2
        if: matrix.qt-version
        with:
          modules: qtwebengine
          version: ${{ matrix.qt-version }}
      - name: configure
        run: |
          mkdir $BUILD_PATH && cd $BUILD_PATH
          # cmake -G"Xcode" -DCMAKE_PREFIX_PATH=`brew --prefix qt` -DCMAKE_OSX_DEPLOYMENT_TARGET=10.10 -DSUPERNOVA=ON .. --debug-output
          # add switching qt path here
          cmake -G"Ninja" -DCMAKE_PREFIX_PATH=`brew --prefix qt` -DCMAKE_OSX_DEPLOYMENT_TARGET=10.10 -DSUPERNOVA=ON -DCMAKE_BUILD_TYPE=Release .. --debug-output
      - name: build
        run: cmake --build $BUILD_PATH --config Release --target install
      - name: create archive
        if: matrix.artifact-suffix
        run: cd $INSTALL_PATH && zip --symlinks -r $ARTIFACT_FILE SuperCollider # this assumes that we end up with the build in the folder SuperCollider
      - name: upload artifacts
        uses: actions/upload-artifact@v2
        if: matrix.artifact-suffix
        with:
          name: ${{ env.ARTIFACT_FILE }}
          path: ${{ env.INSTALL_PATH }}/${{ env.ARTIFACT_FILE }}
          retention-days: 7 # quickly remove test artifacts


# notes:

# main TODO:
# - linting
# - ccache
# - xcpretty
# - matrix config
# - library config
# - test suite
# - deployment

# echo $GITHUB_WORKSPACE # /home/runner/work/supercollider/supercollider

# when do we set version?
# export VERSION_TO_BUILD=${TRAVIS_TAG##Version-}

# split macos package installs?

# additional for cmake (macOS):
# -DRULE_LAUNCH_COMPILE=ccache \
# $EXTRA_CMAKE_FLAGS \
