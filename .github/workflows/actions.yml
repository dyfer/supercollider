name: CI
on:
  push:
    paths-ignore:
      - 'examples/**'
      - 'HelpSource/**'
      - 'sounds/**'
      - '*.md'
  pull_request:
    paths-ignore:
      - 'examples/**'
      - 'HelpSource/**'
      - 'sounds/**'
      - '*.md'
  schedule:
    - cron:  '0 0 * * 0' # run weekly to refresh cache
jobs:
  lint:
    runs-on: ubuntu-20.04
    outputs:
      sc-version: ${{ steps.set-version.outputs.version }}
    steps:
      - uses: actions/checkout@v3
        with:
          submodules: recursive
      - name: lint class library
        run: |
          sudo npm install -g lintspaces-cli
          lintspaces -e .editorconfig SCClassLibrary/**/*.sc || true # ignore failure
      - name: lint cpp files
        run: |
          sudo apt-get install -y clang-format-8
          echo "Running tools/clang-format.py lintall"
          tools/clang-format.py -c clang-format-8 -d clang-format-diff-8 lintall || exit 1
          echo "Lint successful"
      - name: set version string for artifacts
        id: set-version
        run: |
          if [[ "$GITHUB_REF" == refs/tags/* ]]; then
            FULL_TAG=${GITHUB_REF#refs/tags/}
            SC_VERSION=${FULL_TAG##Version-}
          else
            SC_VERSION=$GITHUB_SHA
          fi
          echo "version=$SC_VERSION" >> $GITHUB_OUTPUT

  Linux:
    needs: lint
    runs-on: ubuntu-${{ matrix.os-version }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - job-name: 'focal gcc9 shared libscsynth'
            os-version: '20.04'
            c-compiler: 'gcc-9'
            cxx-compiler: 'g++-9'
            use-syslibs: false
            shared-libscsynth: true
            qt-version: '6.6.0'

          - job-name: 'jammy gcc10 use system libraries'
            os-version: '22.04'
            c-compiler: 'gcc-10'
            cxx-compiler: 'g++-10'
            use-syslibs: true
            shared-libscsynth: false

          - job-name: 'jammy gcc11'
            os-version: '22.04'
            c-compiler: 'gcc-11'
            cxx-compiler: 'g++-11'
            use-syslibs: false
            shared-libscsynth: false

          - job-name: 'jammy gcc12'
            os-version: '22.04'
            c-compiler: 'gcc-12'
            cxx-compiler: 'g++-12'
            use-syslibs: false
            shared-libscsynth: false
            artifact-suffix: 'linux-jammy-gcc12' # set if needed - will trigger artifact upload

          # clang <11 is available only in Ubuntu 20.04,
          # but in 20.04 Qt6 can only be installed from aqt install
          # which is not available for clang, only for gcc
          # - job-name: 'jammy clang7'
          #   os-version: '20.04'
          #   c-compiler: 'clang-7'
          #   cxx-compiler: 'clang++-7'
          #   use-syslibs: false
          #   shared-libscsynth: false

          - job-name: 'jammy clang11'
            os-version: '22.04'
            c-compiler: 'clang-11'
            cxx-compiler: 'clang++-11'
            use-syslibs: false
            shared-libscsynth: false

          # disabled due to an apparent issue with clang-12 and apparent lack of libunwind
          # - job-name: 'jammy clang12'
          #   os-version: '22.04'
          #   c-compiler: 'clang-12'
          #   cxx-compiler: 'clang++-12'
          #   use-syslibs: false
          #   shared-libscsynth: false

          - job-name: 'jammy clang13'
            os-version: '22.04'
            c-compiler: 'clang-13'
            cxx-compiler: 'clang++-13'
            use-syslibs: false
            shared-libscsynth: false

          - job-name: 'jammy clang14'
            os-version: '22.04'
            c-compiler: 'clang-14'
            cxx-compiler: 'clang++-14'
            use-syslibs: false
            shared-libscsynth: false

          - job-name: 'jammy clang15'
            os-version: '22.04'
            c-compiler: 'clang-15'
            cxx-compiler: 'clang++-15'
            use-syslibs: false
            shared-libscsynth: false

    name: Linux ${{ matrix.job-name }}
    env:
      BUILD_PATH: ${{ github.workspace }}/build
      INSTALL_PATH: ${{ github.workspace }}/build/Install
      USE_SYSLIBS: ${{ matrix.use-syslibs }}
      SHARED_LIBSCSYNTH: ${{ matrix.shared-libscsynth }}
      CC: ${{ matrix.c-compiler }}
      CXX: ${{ matrix.cxx-compiler }}
      ARTIFACT_FILE: 'SuperCollider-${{ needs.lint.outputs.sc-version }}-${{ matrix.artifact-suffix }}'
    steps:
      - uses: actions/checkout@v3
        with:
          submodules: recursive
      - name: prepare daily timestamp for cache
        id: current-date
        run: echo "stamp=$(date '+%Y-%m-%d')" >> $GITHUB_OUTPUT
      - name: cache ccache
        uses: actions/cache@v3
        with:
          path: |
            ~/.ccache
            ~/.cache/ccache
          key: ${{ runner.os }}-${{ matrix.os-version }}-${{ matrix.c-compiler }}-${{ matrix.use-syslibs }}-${{ matrix.shared-libscsynth }}-${{ steps.current-date.outputs.stamp }}
          restore-keys: ${{ runner.os }}-${{ matrix.os-version }}-${{ matrix.c-compiler }}-${{ matrix.use-syslibs }}-${{ matrix.shared-libscsynth }}-
      - name: install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install --yes build-essential cmake pkg-config libjack-jackd2-dev libsndfile1-dev libasound2-dev libavahi-client-dev libreadline6-dev libfftw3-dev libicu-dev libxt-dev libudev-dev emacs ccache libglx-dev libgl1-mesa-dev libvulkan-dev libxkbcommon-dev libxcb-xkb-dev
          # install appropriate clang/gcc compilers
          if [[ "$CC" =~ clang-[1-9] ]]; then
            sudo apt-get install -y clang
            sudo apt-get install -y $CC # package names are clang-X
            # sudo apt-get install -y clang-tools-${CC##clang-} libc++-${CC##clang-}-dev libc++abi-${CC##clang-}-dev lld-${CC##clang-} # install additional libraries; package names are clang-tools-X, libc++-X-dev, libc++abi-X-dev, lld-X
            sudo apt-get install -y clang-tools-${CC##clang-} # install additional libraries
            # # use the lld linker
            # sudo mv /usr/bin/ld /usr/bin/ld.old
            # ls /usr/bin
            # dpkg -L lld-${CC##clang-}
            # # sudo ln -s `dpkg -L lld-${CC##clang-} | grep bin/ld.lld` -t /usr/bin ld
            # # echo "first link"
            # # sudo ln -s /usr/bin/lld-${CC##clang-} -t /usr/bin ld || true
            # # ls /usr/bin
            # echo "second link"
            # sudo ln -sf /usr/bin/lld-${CC##clang-} /usr/bin/ld
            # ls /usr/bin
            # which ld
            # ld --help
            
          elif [[ "$CC" =~ gcc-[1-9] ]]; then
            sudo apt-get install -y $CXX # package names are g++-X
          fi
      - name: install system libraries
        if: env.USE_SYSLIBS == 'true'
        run: sudo apt-get install --yes libboost-thread-dev libboost-system-dev libboost-filesystem-dev libboost-regex-dev libboost-test-dev libboost-program-options-dev libyaml-cpp-dev
      - name: install qt from apt
        if: ${{ !matrix.qt-version }}
        run: sudo apt-get install qt6-base-dev qt6-base-dev-tools qt6-tools-dev qt6-tools-dev-tools qt6-declarative-dev libqt6gui6 libqt6printsupport6 libqt6svgwidgets6 libqt6websockets6-dev libqt6webenginecore6 qt6-webengine-dev qt6-webengine-dev-tools libqt6core5compat6-dev libqt6webchannel6-dev libqt6opengl6-dev libqt6svg6-dev linguist-qt6 qt6-l10n-tools
      - name: install qt using aqtinstall
        uses: jurplel/install-qt-action@v3
        if: matrix.qt-version
        with:
          modules: 'qtwebengine qtwebchannel qtwebsockets qtpositioning qt5compat' # modules for qt6 only
          version: ${{ matrix.qt-version }}
          cache: true
          cache-key-prefix: ${{ runner.os }}-v1-${{ matrix.os-version }}-${{ matrix.xcode-version }}-${{ matrix.use-syslibs }}-${{ matrix.shared-libscsynth }}-qt${{ matrix.qt-version }}
      - name: configure
        run: |
          mkdir $BUILD_PATH && cd $BUILD_PATH

          EXTRA_CMAKE_FLAGS=

          if $USE_SYSLIBS; then EXTRA_CMAKE_FLAGS="-DSYSTEM_BOOST=ON -DSYSTEM_YAMLCPP=ON"; fi

          if $SHARED_LIBSCSYNTH; then EXTRA_CMAKE_FLAGS="-DLIBSCSYNTH=ON $EXTRA_CMAKE_FLAGS"; fi

          cmake $EXTRA_CMAKE_FLAGS -DSC_EL=ON -DSC_VIM=ON -DSC_ED=ON -DSC_QT=ON -DSC_IDE=ON  -DCMAKE_INSTALL_PREFIX:PATH=$INSTALL_PATH -DCMAKE_BUILD_TYPE=Release .. # --debug-output
      - name: build
        run: |
          cd $BUILD_PATH
          make install -j2
      - name: create archive
        if: matrix.artifact-suffix
        run: cd $INSTALL_PATH && zip --symlinks -r $ARTIFACT_FILE.zip .
      - name: upload artifacts
        uses: actions/upload-artifact@v3
        if: matrix.artifact-suffix
        with:
          name: ${{ env.ARTIFACT_FILE }}
          path: ${{ env.INSTALL_PATH }}/${{ env.ARTIFACT_FILE }}.zip

